{"version":3,"file":"menu.js","sourceRoot":"","sources":["../../src/lib/menu.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport 'console.table';\r\nimport inquirer from \"inquirer\";\r\nimport { createEmployee, getAllEmployees, getAllRoles, createRole, getAllDepartments, createDepartment, updateEmployeeRoleInDB } from './query.js';\r\n\r\nexport async function showMainMenu() {\r\n    let showWelcome = false;\r\n    \r\n    if (!showWelcome) {\r\n        console.log('\\nWhat would you like to do?\\n');\r\n\r\n        showWelcome = true;\r\n    }\r\n    const { optionFunction } = await inquirer.prompt({\r\n        message: 'Please select an option',\r\n        name: 'optionFunction',\r\n        type: 'list',\r\n        choices: [\r\n            {\r\n                name: 'view All Employees',\r\n                value: viewAllEmployees\r\n            },\r\n            {\r\n                name: 'Add Employee',\r\n                value: addEmployee\r\n            },\r\n            {\r\n                name: 'Update Employee Role',\r\n                value: updateEmployeeRole\r\n            },\r\n            {\r\n                name: 'view All Roles',\r\n                value: showAllRoles\r\n            },\r\n            {\r\n                name: 'Add Role',\r\n                value: addRole\r\n            },\r\n            {\r\n                name: 'View All Departments',\r\n                value: showAllDepartments\r\n            },\r\n            {\r\n                name: 'Add department',\r\n                value: addDepartment\r\n            },\r\n            {\r\n                name: 'Quit',\r\n                value: 0\r\n            }\r\n        ]\r\n    });\r\n\r\n    if (!optionFunction) {\r\n        console.log('\\nThanks for using the Employee Tracker app!');\r\n        process.exit();\r\n    }\r\n    await optionFunction();\r\n    showMainMenu();\r\n}\r\n\r\n// Add a new employee\r\nexport async function addEmployee() {\r\n    const rolesArray = await getAllRoles();\r\n    const employeesArray = await getAllEmployees();\r\n    const { first_name, last_name, role_id, manager_id } = await inquirer.prompt([\r\n        {\r\n            message: 'Enter the employee first name',\r\n            name: 'first_name',\r\n            type: 'input'\r\n        },\r\n        {\r\n            message: 'Enter the employee last name',\r\n            name: 'last_name',\r\n            type: 'input'\r\n        },\r\n        {\r\n            message: 'Please select the employee role',\r\n            name: 'role_id',\r\n            type: 'list',\r\n            choices: rolesArray.map((roleObj: { title: string, id: number }) => {\r\n                return {\r\n                    name: roleObj.title,\r\n                    value: roleObj.id\r\n                }\r\n            })\r\n        },\r\n        {\r\n            message: 'Please select the employee manager (if any)',\r\n            name: 'manager_id',\r\n            type: 'list',\r\n            choices: [\r\n                { name: 'None', value: null },\r\n                ...employeesArray.map((empObj: { first_name: string, last_name: string, id: number }) => {\r\n                    return {\r\n                        name: `${empObj.first_name} ${empObj.last_name}`,\r\n                        value: empObj.id\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n    ]);\r\n\r\n    await createEmployee(first_name, last_name, role_id, manager_id);\r\n    console.log(`Employee added: ${first_name} ${last_name}, Role ID: ${role_id}, Manager ID: ${manager_id}`);\r\n}\r\n\r\n// Show all employees\r\nexport async function viewAllEmployees() {\r\n    const employeeRowsArray = await getAllEmployees();\r\n    console.table(employeeRowsArray);\r\n}\r\n//view All Roles\r\nexport async function showAllRoles() {\r\n    const rolesArray = await getAllRoles();\r\n    console.table(rolesArray);\r\n}\r\n\r\n\r\nexport async function addRole() {\r\n    // Get all departments to display to the user\r\n    const departmentsArray = await getAllDepartments();\r\n\r\n    const { title, salary, department_id } = await inquirer.prompt([\r\n        {\r\n            message: 'Enter the role title',\r\n            name: 'title',\r\n            type: 'input'\r\n        },\r\n        {\r\n            message: 'Enter the role salary',\r\n            name: 'salary',\r\n            type: 'input',\r\n            validate: (input: any) => {\r\n                const salary = parseFloat(input);\r\n                return !isNaN(salary) || 'Please enter a valid salary';\r\n            }\r\n        },\r\n        {\r\n            message: 'Select the department for this role',\r\n            name: 'department_id',\r\n            type: 'list',\r\n            choices: departmentsArray.map((deptObj: { name: string, id: number }) => {\r\n                return {\r\n                    name: deptObj.name,\r\n                    value: deptObj.id\r\n                };\r\n            })\r\n        }\r\n    ]);\r\n\r\n    // Create the new role in the database\r\n    await createRole(title, parseFloat(salary), department_id);\r\n\r\n    console.log(`Role added: ${title} with salary: ${salary} in department ID: ${department_id}`);\r\n}\r\n\r\n//view all departments\r\n\r\nexport async function showAllDepartments() {\r\n    const departmentsArray = await getAllDepartments();\r\n    console.table(departmentsArray);\r\n}\r\n\r\n//View Add department\r\n\r\nexport async function addDepartment() {\r\n    console.log(\"Add Department function called!\");\r\n\r\n    const { name } = await inquirer.prompt([\r\n        {\r\n            message: 'Enter the department name',\r\n            name: 'name',\r\n            type: 'input',\r\n            validate: (input: string) => {\r\n                return input.length > 0 || 'Please enter a valid department name';\r\n            }\r\n        }\r\n    ]);\r\n    await createDepartment(name);\r\n\r\n    console.log(`Department added: ${name}`);\r\n}\r\n\r\n// Add Update Employee Role\r\nexport async function updateEmployeeRole() {\r\n\r\n    const employeesArray = await getAllEmployees();\r\n    console.log(\"Employees:\", employeesArray);\r\n\r\n    const rolesArray = await getAllRoles();\r\n    console.log(\"Roles:\", rolesArray);\r\n\r\n    const { employee_id, new_role_id } = await inquirer.prompt([\r\n        {\r\n            message: 'Select the employee whose role you want to update',\r\n            name: 'employee_id',\r\n            type: 'list',\r\n            choices: employeesArray.map((empObj: { first_name: string, last_name: string, id: number }) => {\r\n                return {\r\n                    name: `${empObj.first_name} ${empObj.last_name}`,\r\n                    value: empObj.id\r\n                };\r\n            })\r\n        },\r\n        {\r\n            message: 'Select the new role for this employee',\r\n            name: 'new_role_id',\r\n            type: 'list',\r\n            choices: rolesArray.map((roleObj: { title: string, id: number }) => {\r\n                return {\r\n                    name: roleObj.title,\r\n                    value: roleObj.id\r\n                };\r\n            })\r\n        }\r\n    ]);\r\n\r\n    await updateEmployeeRoleInDB(employee_id, new_role_id);\r\n\r\n    console.log(`Employee's role updated successfully!`);\r\n}\r\n\r\n"]}